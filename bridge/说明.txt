桥接模式

本质：
	分离抽象和实现

优点：
1	分离抽象和实现部分
2	更好的扩展
3	可动态的切换实现
4	可减少子类的个数

使用情况：
1	如果你不希望在抽象部分和实现部分采用固定的绑定关系，可以采用桥接模式，来把
	抽象部分和实现部分分开，然后在程序运行期间来动态的设置抽象部分需要用到的具
	体的实现，还可以动态的切换具体的实现。
2	如果出现抽象部分和实现部分都能够扩展的情况，可以采用桥接模式，让抽象部分和
	实现部分独立地变化，从而灵活地进行单独扩展，而不是搅在一起，扩展一边就会影
	响到另一边。
3	如果希望实现部分的修改不会对客户残生影响，可以采用桥接模式。由于客户是面向
	抽象的接口在运行，实现部分的修改可以独立于抽象部分，并不会对用户产生影响，
	也可以说对用户是透明的。
4	如果采用集成的实现方案，会导致产生很多子类，对于这种情况可以考虑采用桥接模
	式，分析功能变化的原因，看看是否能分离成不同的围堵，然后通过桥接模式来分离
	它们，从而较少子类的数目。